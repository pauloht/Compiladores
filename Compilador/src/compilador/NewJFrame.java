/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package compilador;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import javax.swing.JFileChooser;

/**
 *
 * @author FREE
 */
public class NewJFrame extends javax.swing.JFrame {
    private JFileChooser fcBuffer = null;
    ArrayList< String > separador;
    ArrayList< Token > tokens;
    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("SelecionarArquivo");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(111, 111, 111)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(158, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(223, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(54, 54, 54))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void gerarSeparadores(File file){
        String line = null;
        separador = new ArrayList<>();
        try{
            FileReader fileReader = new FileReader(file);
            BufferedReader bufferedReader = new BufferedReader(fileReader);
            StringBuilder aux = new StringBuilder();
            boolean comentario = false;
            boolean breakPorComentario = false;
            tokens = new ArrayList<>();
            //primeira parte ler arquivo e remover espacos e quebras de linha e comentarios
            while ((line = bufferedReader.readLine()) != null){
                comentario = false;
                breakPorComentario = false;
                for (int i=0;i<line.length();i++){
                    char charLido = line.charAt(i);
                    if (charLido=='\t'||charLido==' '||charLido=='\n'){//separador de palavra
                        if (comentario){
                            aux.append('/');
                        }
                        comentario = false;
                        if (aux.length()>0){
                            String novaString = aux.toString();
                            separador.add(novaString);
                            aux.setLength(0);
                        }
                    }else{
                        if (charLido=='/'){
                            if (comentario){
                                breakPorComentario = true;
                                break;
                            }
                            comentario = true;
                        }else{
                            if (comentario){
                                aux.append('/');
                            }
                            aux.append(charLido);
                            comentario = false;
                        }
                    }
                }
                if (comentario && !breakPorComentario){
                    aux.append('/');
                }
                if (aux.length()>0){
                    String novaString = aux.toString();
                    separador.add(novaString);
                    aux.setLength(0);
                }
            }
            /*
            System.out.println("primeira etapa : ");
            for (int i=0;i<separador.size();i++){
                System.out.println(i+" : "+separador.get(i));
            }
            */
            //segunda etapa separar palavras de abertura de paranteses, operadores aritmeticos, logicos e fim de linha
            ArrayList< String > novoSeparador = new ArrayList<>();
            aux.setLength(0);
            boolean characterAcumulador = false;
            boolean selfAcumulador = false;
            boolean acumulamEmIgual = false;
            for (int i=0;i<separador.size();i++){
                characterAcumulador = false;
                selfAcumulador = false;
                acumulamEmIgual = false;
                String localString = separador.get(i);
                for (int j=0;j<localString.length();j++){
                    char charLido = localString.charAt(j);
                    int valorASC = (int)charLido;
                    if ((charLido>=48&&charLido<=57)||charLido=='.'){//lendo um numero
                        if (selfAcumulador||acumulamEmIgual){
                            String subDivisao = aux.toString();
                            novoSeparador.add(subDivisao);
                            aux.setLength(0);
                        }
                        selfAcumulador = false;
                        acumulamEmIgual = false;
                        characterAcumulador = false;
                        aux.append(charLido);
                    }else if ((charLido>=65&&charLido<=90) || (charLido>=97&&charLido<=122)){//lendo uma letra de A-z
                        if (characterAcumulador || selfAcumulador || acumulamEmIgual){
                            String subDivisao = aux.toString();
                            novoSeparador.add(subDivisao);
                            aux.setLength(0);
                        }
                        selfAcumulador = false;
                        acumulamEmIgual = false;
                        characterAcumulador = false;
                        aux.append(charLido);
                    }else{//simbolo especial
                        if (charLido=='|'||charLido=='&'||charLido=='?'||charLido=='!'){//acumulam com si mesmo exemplo == && || ??
                            characterAcumulador = false;
                            acumulamEmIgual = false;
                            if (aux.length()>0){
                                if (aux.charAt(0)==charLido){
                                    //System.out.println(aux.charAt(0) + " == " + charLido);
                                    aux.append(charLido);
                                    String subDivisao = aux.toString();
                                    novoSeparador.add(subDivisao);
                                    aux.setLength(0);
                                    selfAcumulador = false;
                                }else{
                                    //System.out.println(aux.charAt(0) + " != " + charLido);
                                    String subDivisao = aux.toString();
                                    novoSeparador.add(subDivisao);
                                    aux.setLength(0);
                                    
                                    aux.append(charLido);
                                    selfAcumulador = true;
                                }
                            }else{
                                selfAcumulador = true;
                                aux.append(charLido);
                            }
                        }else{
                            if (charLido=='+'||charLido=='-'){ //acumuladores com valores exemplo +5 -4
                                if (aux.length()>0){
                                        String subDivisao = aux.toString();
                                        novoSeparador.add(subDivisao);
                                        aux.setLength(0);
                                }
                                acumulamEmIgual = false;
                                characterAcumulador = true;
                                selfAcumulador = false;
                                aux.append(charLido);
                            }else if (charLido=='>'||charLido=='~'||charLido=='<'||charLido=='='){//acumulam em igual exemplo >= != <= ==
                                characterAcumulador = false;
                                selfAcumulador = false;
                                if (charLido=='='&&acumulamEmIgual){
                                    acumulamEmIgual = false;
                                    aux.append(charLido);
                                    String subDivisao = aux.toString();
                                    novoSeparador.add(subDivisao);
                                    aux.setLength(0);
                                }else{
                                    acumulamEmIgual = true;
                                    if (aux.length()>0){
                                            String subDivisao = aux.toString();
                                            novoSeparador.add(subDivisao);
                                            aux.setLength(0);
                                    }
                                    aux.append(charLido);
                                }
                            }else{//character separadores exemplo ; ) ( { } só fazem sentido sozinhos
                                if (aux.length()>0){
                                    String subDivisao = aux.toString();
                                    novoSeparador.add(subDivisao);
                                    aux.setLength(0);
                                }
                                String opSeparador = ""+charLido;
                                novoSeparador.add(opSeparador);
                                characterAcumulador = false;
                                selfAcumulador = false;
                                acumulamEmIgual = false;
                            }
                        }
                    }
                }
                if (aux.length()>0){
                    String subDivisao = aux.toString();
                    novoSeparador.add(subDivisao);
                    aux.setLength(0);
                }
            }
            //
            aux.setLength(0);
            separador = novoSeparador;
            /*
            System.out.println("segunda etapa : ");
            for (int i=0;i<separador.size();i++){
                System.out.println(i+" : "+separador.get(i));
            }
            */
            
            tokens = new ArrayList();
            for (int i=0;i<separador.size();i++){
                String token = separador.get(i);
                String msgErro = "";
                Object valor = null;
                Classificador classificador = Classificador.ERRO;
                switch (token) {
                    case "+":
                        classificador = Classificador.OP_ARITMETICA;
                        valor = "+";
                        break;
                    case "-":
                        classificador = Classificador.OP_ARITMETICA;
                        valor = "-";
                        break;
                    case "/":
                        classificador = Classificador.OP_ARITMETICA;
                        valor = "/";
                        break;
                    case "*":
                        classificador = Classificador.OP_ARITMETICA;
                        valor = "*";
                        break;
                    case "==" :
                        classificador = Classificador.OP_RELACIONAL;
                        valor = "==";
                        break;
                    case "=" :
                        classificador = Classificador.ATRIBUICAO;
                        break;
                    case ";" :
                        classificador = Classificador.PONTOVIRGULA;
                        break;
                    case "&&" :
                        classificador = Classificador.OP_BOOLEAN_DUAL;
                        valor = token;
                        break;
                    case "||" :
                        classificador = Classificador.OP_BOOLEAN_DUAL;
                        valor = token;
                        break;
                    case "!!" :
                        classificador = Classificador.NEGACAO;
                        break;
                    case "??" :
                        classificador = Classificador.OP_BOOLEAN_DUAL;
                        valor = token;
                        break;
                    case "~=" :
                        classificador = Classificador.OP_RELACIONAL;
                        valor = token;
                        break;
                    case ">" :
                        classificador = Classificador.OP_RELACIONAL;
                        valor = token;
                        break;
                    case "<" :
                        classificador = Classificador.OP_RELACIONAL;
                        valor = token;
                        break;
                    case ">=" :
                        classificador = Classificador.OP_RELACIONAL;
                        valor = token;
                        break;
                    case "<=" :
                        classificador = Classificador.OP_RELACIONAL;
                        valor = token;
                        break;
                    case "false" :
                        classificador = Classificador.FALSE;
                        break;
                    case "true" :
                        classificador = Classificador.TRUE;
                        break;
                    case "int" :
                        classificador = Classificador.TIPO;
                        valor = token;
                        break;
                    case "double" :
                        classificador = Classificador.TIPO;
                        valor = token;
                        break;
                    case "char" :
                        classificador = Classificador.TIPO;
                        valor = token;
                        break;
                    case "boolean" :
                        classificador = Classificador.TIPO;
                        valor = token;
                        break;
                    case "for" :
                        classificador = Classificador.FOR;
                        break;
                    case "while" :
                        classificador = Classificador.WHILE;
                        break;
                    case "if" :
                        classificador = Classificador.IF;
                        break;
                    case "else" :
                        classificador = Classificador.ELSE;
                        break;
                    case "(" :
                        classificador = Classificador.ABREPARENTESES;
                        break;
                    case ")" :
                        classificador = Classificador.FECHAPARENTESES;
                        break;
                    case "{" :
                        classificador = Classificador.ABRECHAVES;
                        break;
                    case "}" :
                        classificador = Classificador.FECHACHAVES;
                        break;
                    default:
                        valor = token;
                        // ou é um nome ou é um numero inteiro ou é um numero real ou é uma string ou é um char
                        int tipo = 0; // tipo 0 = nao identificado tipo 1 = numero inteiro ou real tipo 2 = string tipo 3 = char tipo 4 = int tipo 5 = real tipo 6 = erro
                        char firstChar = token.charAt(0);
                        int firstASC = (int)firstChar;
                        if (firstChar=='"'){
                            if (token.charAt(token.length()-1)=='"'){
                                classificador = Classificador.STRING;
                                valor = token;
                            }else{
                                msgErro = ("String invalida!");
                            }
                        }else if (firstASC==39){// '
                            if (token.length()==3){
                                int ultimoToken = (int)token.charAt(2);
                                if (ultimoToken == 39){
                                    classificador = Classificador.VCHAR;
                                }else{
                                    msgErro = ("char invalido(não termina com ')");
                                }
                            }else if (token.length()==4){
                                int ultimoToken = (int)token.charAt(3);
                                if (token.charAt(1)=='\\'&&ultimoToken==39){
                                    classificador = classificador.VCHAR;
                                }else{
                                    msgErro = ("char invalido");
                                }
                            }else{
                                msgErro = ("char invalido!(tamanho 5?)");
                            }
                        }else if (firstASC>=48&&firstASC<=57){
                            boolean encontrouPonto = false;
                            boolean erro = false;
                            aux.setLength(0);
                            String errorMsg = "";
                            for (int j=1;j<token.length();j++){
                                char charLido = token.charAt(j);
                                int valorASC = (int)charLido;
                                if (charLido=='.'){
                                    if (encontrouPonto){
                                        erro = true;
                                        errorMsg = "Número com dois '.'!";
                                        break;
                                    }else{
                                        encontrouPonto = true;
                                    }
                                }else if (valorASC<48||valorASC>57){
                                    erro = true;
                                    aux.append(charLido);
                                    if (((valorASC>=65&&valorASC<=90) || (valorASC>=97&&valorASC<=122))){
                                        errorMsg = "Número com caracter inválido " + aux.toString()+", ou variavel que começa com numero";
                                    }else{
                                        errorMsg = "Número com caracter inválido " + aux.toString();
                                    }
                                    aux.setLength(0);
                                    break;
                                }
                            }
                            if (erro){
                                msgErro = errorMsg;
                            }else{
                                char ultimoChar = token.charAt(token.length()-1);
                                if (ultimoChar=='.'){
                                    msgErro = "Número não pode terminar em '.'";
                                }else{
                                    if (encontrouPonto){
                                        classificador = Classificador.VDOUBLE;
                                        try{
                                        valor = Double.parseDouble(token);
                                        }catch(NumberFormatException e){
                                            e.printStackTrace();
                                            classificador = Classificador.ERRO;
                                            msgErro = ("Erro conversão double?");
                                        }
                                    }else{
                                        classificador = Classificador.VINTEIRO;
                                        try{
                                        valor = Integer.parseInt(token);
                                        }catch(NumberFormatException e){
                                            e.printStackTrace();
                                            classificador = Classificador.ERRO;
                                            msgErro = ("Erro conversão inteiro?");
                                        }
                                    }
                                }
                            }
                        }else if (firstChar=='+'||firstChar=='-'){
                            char segundoChar = token.charAt(1);
                            int segundoASC = (int)segundoChar;
                            if (segundoASC>=48&&segundoASC<=57){
                                boolean encontrouPonto = false;
                                boolean erro = false;
                                String errorMsg = "";
                                aux.setLength(0);
                                for (int j=1;j<token.length();j++){
                                    char charLido = token.charAt(j);
                                    int valorASC = (int)charLido;
                                    if (charLido=='.'){
                                        if (encontrouPonto){
                                            erro = true;
                                            errorMsg = "Número com dois '.'!";
                                            break;
                                        }else{
                                            encontrouPonto = true;
                                        }
                                    }else if (valorASC<48||valorASC>57){
                                        erro = true;
                                        aux.append(charLido);
                                        if (((valorASC>=65&&valorASC<=90) || (valorASC>=97&&valorASC<=122))){
                                        errorMsg = "Número com caracter inválido " + aux.toString()+", ou variavel que começa com numero";
                                        }else{
                                            errorMsg = "Número com caracter inválido " + aux.toString();
                                        }
                                        aux.setLength(0);
                                        break;
                                    }
                                }
                                if (erro){
                                    msgErro = errorMsg;
                                }else{
                                    char ultimoChar = token.charAt(token.length()-1);
                                    if (ultimoChar=='.'){
                                        msgErro = "Número não pode terminar em '.'";
                                    }else{
                                        if (encontrouPonto){
                                            classificador = Classificador.VDOUBLE;
                                            try{
                                            valor = Double.parseDouble(token);
                                            }catch(NumberFormatException e){
                                                e.printStackTrace();
                                                classificador = Classificador.ERRO;
                                                msgErro = ("Erro conversão double?");
                                            }
                                        }else{
                                            classificador = Classificador.VINTEIRO;
                                            try{
                                            valor = Integer.parseInt(token);
                                            }catch(NumberFormatException e){
                                                e.printStackTrace();
                                                classificador = Classificador.ERRO;
                                                msgErro = ("Erro conversão inteiro?");
                                            }
                                        }
                                    }
                                }
                            }else{
                                msgErro = ("Erro de representação de número começando com '+/-' seguido de '.',use um NUMERO depois de '+/-', Ex : +0.5 -1.7");
                            }
                        }else{
                            //NOME
                            //tem que comecar com letra e ser seguido de letras e numeros
                            boolean valido = true;
                            char charInvalidoBuffer = ' ';
                            int indicadorDeErro = 0;//0 sem erro 1 - variavel que começa com numero 2-simbolo ilegal
                            char erroBuffer = ' ';
                            int bufferDePosicao = 0;
                            for (int j=0;j<token.length();j++){
                                char charLido = token.charAt(j);
                                int valorASC = (int)token.charAt(j);
                                if (j==0){
                                    if ((valorASC>=65&&valorASC<=90) || (valorASC>=97&&valorASC<=122)){
                                        
                                    }else{
                                        if (valorASC>=48&&valorASC<=57){
                                            indicadorDeErro = 1;
                                        }else{
                                            indicadorDeErro = 2;
                                        }
                                        bufferDePosicao = i;
                                        erroBuffer = charLido;
                                        valido = false;
                                        charInvalidoBuffer = charLido;
                                        break;
                                    }
                                }else{
                                    if ((valorASC>=65&&valorASC<=90) || (valorASC>=97&&valorASC<=122) || (valorASC>=48&&valorASC<=57)){
                                        //valido
                                    }else{
                                        bufferDePosicao = i;
                                        indicadorDeErro = 2;
                                        erroBuffer = charLido;
                                        valido = false;
                                        charInvalidoBuffer = charLido;
                                        break;
                                    }
                                }
                            }
                            if (valido){
                                classificador = classificador.ID;
                                valor = token;
                            }else{
                                String errorMsg;
                                switch (indicadorDeErro) {
                                    case 1:
                                        errorMsg = "Variável não pode começar com número!";
                                        break;
                                    case 2:
                                        StringBuilder sb = new StringBuilder();
                                        if (erroBuffer=='.'){
                                            sb.append("Numero não pode começar com '.'");
                                        }else{
                                            sb.append("Simbolo ilegal : '").append(erroBuffer).append("'");
                                        }
                                        errorMsg = sb.toString();
                                        break;
                                    default:
                                        errorMsg = "erro nao catalogado?";
                                        break;
                                }
                                msgErro = errorMsg;
                            }
                        }
                        break;
                }
                Token nTok = new Token(classificador,valor);
                nTok.setMsg(msgErro);
                tokens.add(nTok);
                //System.out.println("para token : " + token);
                //nTok.printSignificado();
            }
            for (int i=0;i<tokens.size();i++){
                System.out.println("token id : " + i + " -> " + tokens.get(i).printSignificado());
            }
            bufferedReader.close();
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.setVisible(true);
        File fileBuffer = null;
        if (fcBuffer==null)
        {
            fcBuffer = new JFileChooser();
            fcBuffer.setFileSelectionMode(JFileChooser.FILES_ONLY);
        }
        
        int returnVal = fcBuffer.showOpenDialog(this);
        
        try{
            if (returnVal == JFileChooser.APPROVE_OPTION)
            {
                fileBuffer = fcBuffer.getSelectedFile();
                gerarSeparadores(fileBuffer);
            }
            else
            {
                System.out.println("cancell");
            }
        }
        catch( Exception e)
        {
            e.printStackTrace();
        }
        //System.out.println("end");
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
